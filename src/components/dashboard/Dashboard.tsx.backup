import React, { useEffect, useState, useMemo, useCallback } from 'react';
import { useNavigate, Routes, Route } from 'react-router-dom';
import Logo from '../Logo';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { 
  Plus, 
  FileText, 
  BookOpen, 
  Settings, 
  Download, 
  Video, 
  ChevronLeft, 
  ChevronRight, 
  Filter, 
  SlidersHorizontal, 
  Calendar, 
  UserPlus, 
  ClipboardList, 
  Bell,
  Users,
  FileCheck,
  Briefcase,
  Book,
  MessageCircle,
  Clock,
  ArrowRight,
  LayoutDashboard,
  HelpCircle,
  Menu
} from 'lucide-react';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { AspectRatio } from '@/components/ui/aspect-ratio';
import { toast } from 'sonner';
import { SidebarProvider, Sidebar, SidebarMenu, SidebarMenuItem, SidebarMenuButton } from '@/components/ui/sidebar';
import { addDays, startOfWeek, endOfWeek, format, isWithinInterval, parseISO, isSameDay, isSameWeek } from 'date-fns';
import { testSupabaseConnection } from '../../lib/db';
import { toZonedTime } from 'date-fns-tz';
import { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { EmployeeForm } from './EmployeeForm';
import { Employee, getEmployees, addEmployee, updateEmployee, deleteEmployee, insertMockEmployees, getEmployeesForWeek } from '@/lib/db';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

interface OnboardingData {
  companyName?: string;
  preferredDomain?: string;
  companySize?: string;
  industry?: string;
  role?: string;
  tenant?: string;
  platforms?: { id: string; name: string; seats: number; selected: boolean; }[];
}

const resourceImages: Record<string, string> = {
  legal: 'https://images.unsplash.com/photo-1589391886645-d51941baf7fb?q=80&w=600&auto=format&fit=crop',
  tracking: 'https://images.unsplash.com/photo-1586281380349-632531db7ed4?q=80&w=600&auto=format&fit=crop',
  updates: 'https://images.unsplash.com/photo-1615403916271-e2dbc8cf3bf4?q=80&w=600&auto=format&fit=crop',
  templates: 'https://images.unsplash.com/photo-1568311566749-28c6f66159b9?q=80&w=600&auto=format&fit=crop',
  backfilling: 'https://images.unsplash.com/photo-1551836022-deb4988cc6c0?q=80&w=600&auto=format&fit=crop',
  reintegration: 'https://images.unsplash.com/photo-1543269865-cbf427effbad?q=80&w=600&auto=format&fit=crop',
};

const colorClasses: Record<string, string> = {
  legal: 'bg-blue-50 text-blue-800',
  tracking: 'bg-purple-50 text-purple-800',
  updates: 'bg-green-50 text-green-800',
  templates: 'bg-amber-50 text-amber-800',
  backfilling: 'bg-rose-50 text-rose-800',
  reintegration: 'bg-indigo-50 text-indigo-800',
};

const getWeekDays = (date: Date) => {
  const start = startOfWeek(date, { weekStartsOn: 1 }); // Monday
  return Array.from({ length: 7 }, (_, i) => addDays(start, i));
};

const newsHeadlines = [
  {
    title: 'Parental Leave Laws Updated in 2024',
    source: 'Government of Canada',
    url: '#',
  },
  {
    title: 'Quebec Expands Parental Leave Benefits',
    source: 'CBC News',
    url: '#',
  },
  {
    title: 'Legal Rights for New Parents: What to Know',
    source: 'Canadian Bar Association',
    url: '#',
  },
  {
    title: 'Employers Adapting to New Leave Policies',
    source: 'The Globe and Mail',
    url: '#',
  },
  {
    title: 'Political Debate: National Parental Leave Standards',
    source: 'CTV News',
    url: '#',
  },
];

const brandColor = 'text-[#A85B2A]';
const brandBg = 'bg-[#F8F6F3]';
const brandSidebar = 'bg-[#F8F6F3] border-r border-[#E5E3DF]';
const brandActive = 'bg-[#EDE6DE] text-[#A85B2A] font-semibold';

const navItems = [
  { name: 'Dashboard', icon: <LayoutDashboard className="h-5 w-5" />, active: true },
  { name: 'Leave Plans', icon: <Users className="h-5 w-5" /> },
  { name: 'Template Library', icon: <FileText className="h-5 w-5" /> },
  { name: 'Learning Center', icon: <BookOpen className="h-5 w-5" /> },
  { name: 'Company Settings', icon: <Settings className="h-5 w-5" /> },
  { name: 'Help Center', icon: <HelpCircle className="h-5 w-5" /> },
];

const actionCards = [
  {
    title: 'Create global policy',
    icon: <Calendar className="h-6 w-6 text-[#2A7FA8]" />,
    btn: 'View details',
    color: 'bg-[#F3F8FC]'
  },
  {
    title: 'Create a custom leave plan',
    icon: <UserPlus className="h-6 w-6 text-[#2A4CA8]" />,
    btn: 'View details',
    color: 'bg-[#F3F4FC]'
  },
  {
    title: 'Template library',
    icon: <FileText className="h-6 w-6 text-[#A85B2A]" />,
    btn: 'View details',
    color: 'bg-[#FCF6F3]'
  },
];

const employees = [
  { name: 'Finn Hansen', job: 'Marketing Lead', leave: '2023-05-05', return: '2024-05-05', type: 'Parental', status: 'ACTIVE', support: 'Activated', avatar: '' },
  { name: 'Hanna Baptista', job: 'Graphic Designer', leave: '2023-05-05', return: '2024-05-05', type: 'Long-term', status: 'ON LEAVE', support: 'Service Initiated', avatar: '' },
  { name: 'Melinda Creel', job: 'Finance Director', leave: '2023-05-05', return: '2024-05-05', type: 'Caregiver', status: 'DELAYED', support: 'Service Initiated', avatar: '' },
  { name: 'Rayna Torff', job: 'Project Manager', leave: '2023-05-05', return: '2024-05-05', type: 'Long - extended leave', status: 'ACTIVE', support: 'Activated', avatar: '' },
  { name: 'Giana Lipshutz', job: 'Creative Director', leave: '2023-05-05', return: '2024-05-05', type: 'Union short leave', status: 'ON LEAVE', support: 'Service Initiated', avatar: '' },
  { name: 'James George', job: 'Business Analyst', leave: '2023-05-05', return: '2024-05-05', type: 'Other - Long-term', status: 'DELAYED', support: 'Service Initiated', avatar: '' },
  { name: 'Jordyn George', job: 'IT Support Staff', leave: '2023-05-05', return: '2024-05-05', type: 'Other - Short', status: 'ON LEAVE', support: 'Activated', avatar: '' },
  { name: 'Skylar Herwitz', job: 'Manager, Comms', leave: '2023-05-05', return: '2024-05-05', type: 'Request - Adoption', status: 'ACTIVE', support: 'Activated', avatar: '' },
];

const calendarDays = [15, 16, 17, 18, 19, 20, 21];
const today = 19;

const events = [
  { name: 'James Carter', date: 'May 23 - Jun 10', type: 'Parental Leave', avatar: '', color: 'bg-[#F3F8FC] text-[#2A7FA8]' },
  { name: 'James Carter', date: 'May 23 - Jun 10', type: 'Parental Leave', avatar: '', color: 'bg-[#F3F8FC] text-[#2A7FA8]' },
];
const returning = [
  { name: 'David Kim', date: 'Returning May 26 - Family Leave', note: 'Reintegration documents needed', color: 'bg-[#E6F7F1] text-[#1CA97A]' },
];
const news = [
  { title: 'Supreme Court Rules on Paid Parental Leave', date: '16 May 2023', time: '4 min read', featured: true },
  { title: 'New Federal Guidance on Sick Leave Policies', date: '14 May 2023', time: '4 min read' },
  { title: 'State Bills Expand Family Leave', date: '10 May 2023', time: '3 min read' },
];

const MONTREAL_TZ = 'America/Toronto';
const getMontrealNow = () => toZonedTime(new Date(), MONTREAL_TZ);

const formatDisplayDate = (date) => format(date, `MMM do 'â€™'yy`);

const Dashboard: React.FC = () => {
  const navigate = useNavigate();
  const [data, setData] = useState<OnboardingData>({});
  const [loading, setLoading] = useState(true);
  const [calendarDate, setCalendarDate] = useState(new Date());
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isEmployeeSheetOpen, setIsEmployeeSheetOpen] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [sidebarWeekStart, setSidebarWeekStart] = useState(() => startOfWeek(getMontrealNow(), { weekStartsOn: 1 }));
  const queryClient = useQueryClient();

  const { data: employees = [], isLoading: isLoadingEmployees } = useQuery({
    queryKey: ['employees', sidebarWeekStart],
    queryFn: () => getEmployeesForWeek(sidebarWeekStart),
  });

  const addEmployeeMutation = useMutation({
    mutationFn: addEmployee,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      setIsEmployeeSheetOpen(false);
    },
  });

  const updateEmployeeMutation = useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<Employee> }) => updateEmployee(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      setIsEmployeeSheetOpen(false);
      setSelectedEmployee(null);
    },
  });

  const deleteEmployeeMutation = useMutation({
    mutationFn: deleteEmployee,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      setIsDeleteDialogOpen(false);
      setSelectedEmployee(null);
    },
  });

  const handleAddEmployee = () => {
    setSelectedEmployee(null);
    setIsEmployeeSheetOpen(true);
  };

  const handleEditEmployee = (employee: Employee) => {
    setSelectedEmployee(employee);
    setIsEmployeeSheetOpen(true);
  };

  const handleDeleteEmployee = (employee: Employee) => {
    setSelectedEmployee(employee);
    setIsDeleteDialogOpen(true);
  };

  const handleEmployeeSubmit = async (formData: any) => {
    try {
      if (selectedEmployee) {
        await updateEmployeeMutation.mutateAsync({ id: selectedEmployee.id!, data: formData });
        toast.success('Employee updated successfully');
      } else {
        await addEmployeeMutation.mutateAsync(formData);
        toast.success('Employee added successfully');
      }
    } catch (error) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error('An error occurred while saving the employee');
      }
    }
  };

  const handleDeleteConfirm = async () => {
    if (selectedEmployee?.id) {
      await deleteEmployeeMutation.mutateAsync(selectedEmployee.id);
    }
  };

  const weekDays = getWeekDays(calendarDate);
  const weekStart = startOfWeek(calendarDate, { weekStartsOn: 1 });
  const weekEnd = endOfWeek(calendarDate, { weekStartsOn: 1 });

  const sidebarWeekDays = useMemo(() => Array.from({ length: 7 }, (_, i) => addDays(sidebarWeekStart, i)), [sidebarWeekStart]);
  const sidebarWeekEnd = endOfWeek(sidebarWeekStart, { weekStartsOn: 1 });
  const todayMontreal = getMontrealNow();
  const isCurrentWeek = isSameWeek(todayMontreal, sidebarWeekStart, { weekStartsOn: 1 });

  const parsedEmployees = useMemo(() => employees.map(emp => ({
    ...emp,
    leaveDate: emp.leave_date ? parseISO(emp.leave_date) : null,
    returnDate: emp.return_date ? parseISO(emp.return_date) : null,
  })), [employees]);

  const leavingThisWeek = useMemo(() => parsedEmployees.filter(emp =>
    emp.leaveDate && isWithinInterval(emp.leaveDate, { start: sidebarWeekStart, end: sidebarWeekEnd })
  ), [parsedEmployees, sidebarWeekStart, sidebarWeekEnd]);

  const returningThisWeek = useMemo(() => parsedEmployees.filter(emp =>
    emp.returnDate && isWithinInterval(emp.returnDate, { start: sidebarWeekStart, end: sidebarWeekEnd })
  ), [parsedEmployees, sidebarWeekStart, sidebarWeekEnd]);

  const currentlyOnLeave = useMemo(() => parsedEmployees.filter(emp =>
    emp.leaveDate && emp.returnDate && emp.leaveDate <= sidebarWeekEnd && emp.returnDate >= sidebarWeekStart
  ), [parsedEmployees, sidebarWeekStart, sidebarWeekEnd]);

  const reintegrationTrack = useMemo(() => parsedEmployees.filter(emp =>
    emp.status && emp.status.toUpperCase() === 'REINTEGRATION'
  ), [parsedEmployees]);

  const dayEventCounts = useMemo(() => sidebarWeekDays.map(day => {
    const leavingCount = parsedEmployees.filter(emp => emp.leaveDate && isSameDay(emp.leaveDate, day)).length;
    const returningCount = parsedEmployees.filter(emp => emp.returnDate && isSameDay(emp.returnDate, day)).length;
    return { leaving: leavingCount, returning: returningCount };
  }), [parsedEmployees, sidebarWeekDays]);

  const [eventTab, setEventTab] = useState<'leaving'|'returning'|'onleave'|'reintegration'>('leaving');

  const goToPrevWeek = useCallback(() => setSidebarWeekStart(prev => addDays(prev, -7)), []);
  const goToNextWeek = useCallback(() => setSidebarWeekStart(prev => addDays(prev, 7)), []);
  const goToCurrentWeek = useCallback(() => setSidebarWeekStart(startOfWeek(getMontrealNow(), { weekStartsOn: 1 })), []);

  useEffect(() => {
    // Retrieve user data from local storage
    const storedData = localStorage.getItem('onboardingData');
    
    if (!storedData) {
      // If no data, redirect back to onboarding
      navigate('/onboarding/step-one');
      return;
    }
    
    try {
      setData(JSON.parse(storedData));
    } catch (error) {
      console.error('Error parsing onboarding data:', error);
      toast.error('Something went wrong loading your data. Please try again.');
    } finally {
      setLoading(false);
    }
  }, [navigate]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-pulse text-xl">Loading your dashboard...</div>
      </div>
    );
  }

  const domain = data.preferredDomain ? `${data.preferredDomain}.manela.com` : 'yourdomain.manela.com';
  const userInitials = data.role?.split(' ').map(name => name[0]).join('') || 'HR';

  return (
    <div className="min-h-screen bg-gray-50">
      <SidebarProvider>
        <div className="flex h-screen">
          <Sidebar>
            <SidebarMenu>
              <SidebarMenuItem>
                <SidebarMenuButton
                  onClick={() => navigate('/dashboard')}
                  isActive={window.location.pathname === '/dashboard'}
                >
                  <LayoutDashboard className="h-5 w-5 mr-2" />
                  Dashboard
                </SidebarMenuButton>
              </SidebarMenuItem>
              <SidebarMenuItem>
                <SidebarMenuButton
                  onClick={() => navigate('/dashboard/employees')}
                  isActive={window.location.pathname === '/dashboard/employees'}
                >
                  <Users className="h-5 w-5 mr-2" />
                  Employees
                </SidebarMenuButton>
              </SidebarMenuItem>
              <SidebarMenuItem>
                <SidebarMenuButton
                  onClick={() => navigate('/dashboard/settings')}
                  isActive={window.location.pathname === '/dashboard/settings'}
                >
                  <Settings className="h-5 w-5 mr-2" />
                  Settings
                </SidebarMenuButton>
              </SidebarMenuItem>
            </SidebarMenu>
          </Sidebar>

          <main className="flex-1 min-h-screen bg-white">
            {/* Header */}
            <header className="h-20 flex items-center border-b border-[#E5E3DF] px-4 md:px-8">
              <h1 className="text-xl font-semibold text-gray-900">Dashboard</h1>
            </header>

            {/* Content */}
            <div className="p-6">
              <Routes>
                <Route path="/" element={
                  <>
                    {/* Welcome */}
                    <div className="mb-8">
                      <h2 className="text-2xl font-bold text-gray-900 mb-1">Welcome Back, Wolf Pixel <span className="inline-block">ðŸ‘‹</span></h2>
                    </div>

                    {/* Action Cards */}
                    <div className="flex flex-col lg:flex-row gap-6 mb-8">
                      {actionCards.map((card, i) => (
                        <div key={i} className={`flex-1 rounded-xl border border-[#E5E3DF] ${card.color} flex flex-col items-start p-6 min-w-[220px]`}>
                          <div className="mb-4">{card.icon}</div>
                          <div className="font-semibold text-lg mb-2 text-gray-900">{card.title}</div>
                          <Button variant="outline" className="mt-auto px-3 py-2 border border-[#E5E3DF] text-gray-700 flex items-center gap-2 group">
                            {card.btn}
                            <ArrowRight className="h-4 w-4 group-hover:translate-x-1 transition-transform" />
                          </Button>
                        </div>
                      ))}
                    </div>

                    {/* Employees Table */}
                    <div className="bg-white rounded-xl border border-[#E5E3DF] p-6">
                      <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4 mb-4">
                        <h3 className="text-xl font-semibold text-gray-900">Employees</h3>
                        <div className="flex gap-2">
                          <Button 
                            variant="outline"
                            onClick={async () => {
                              try {
                                await insertMockEmployees();
                                toast.success('Mock data inserted successfully');
                                queryClient.invalidateQueries({ queryKey: ['employees'] });
                              } catch (error) {
                                toast.error('Failed to insert mock data');
                              }
                            }}
                          >
                            Insert Mock Data
                          </Button>
                          <Button 
                            className="bg-black text-white px-5 py-2 rounded-lg text-sm font-semibold w-full lg:w-auto"
                            onClick={handleAddEmployee}
                          >
                            + Add New Employee
                          </Button>
                        </div>
                      </div>
                      <div className="bg-white border border-[#E5E3DF] rounded-xl overflow-x-auto">
                        <table className="w-full text-sm min-w-[800px]">
                          <thead className="bg-[#F8F6F3]">
                            <tr>
                              <th className="text-left px-6 py-3 font-medium text-gray-500">Employee Name</th>
                              <th className="text-left px-6 py-3 font-medium text-gray-500">Job Title</th>
                              <th className="text-left px-6 py-3 font-medium text-gray-500">Leave dates</th>
                              <th className="text-left px-6 py-3 font-medium text-gray-500">Return date</th>
                              <th className="text-left px-6 py-3 font-medium text-gray-500">Leave type</th>
                              <th className="text-left px-6 py-3 font-medium text-gray-500">Employee Status</th>
                              <th className="text-left px-6 py-3 font-medium text-gray-500">Support Center</th>
                            </tr>
                          </thead>
                          <tbody>
                            {employees.map((emp) => (
                              <tr 
                                key={emp.id} 
                                className="border-b border-[#F8F6F3] hover:bg-[#F8F6F3] cursor-pointer transition-colors"
                                onClick={() => handleEditEmployee(emp)}
                              >
                                <td className="px-6 py-3">
                                  <span className="font-medium text-gray-900">{emp.name}</span>
                                </td>
                                <td className="px-6 py-3 text-gray-700">{emp.job_title}</td>
                                <td className="px-6 py-3 text-gray-700">{emp.leave_date}</td>
                                <td className="px-6 py-3 text-gray-700">{emp.return_date}</td>
                                <td className="px-6 py-3 text-gray-700">{emp.leave_type}</td>
                                <td className="px-6 py-3">
                                  <Badge className={`px-3 py-1 rounded-full text-xs font-semibold ${
                                    emp.status === 'ACTIVE' ? 'bg-[#E6F7F1] text-[#1CA97A]' : 
                                    emp.status === 'ON LEAVE' ? 'bg-[#F3F8FC] text-[#2A7FA8]' : 
                                    'bg-[#FCF6F3] text-[#A85B2A]'
                                  }`}>
                                    {emp.status}
                                  </Badge>
                                </td>
                                <td className="px-6 py-3 text-gray-700">{emp.support_status}</td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </>
                } />
                <Route path="/employees" element={
                  <div className="bg-white rounded-xl border border-[#E5E3DF] p-6">
                    {/* ... existing employees management code ... */}
                  </div>
                } />
                <Route path="/settings" element={
                  <div className="bg-white rounded-xl border border-[#E5E3DF] p-6">
                    <h2 className="text-2xl font-bold mb-6">Settings</h2>
                    {/* Add settings content here */}
                  </div>
                } />
              </Routes>
            </div>
          </main>
        </div>
      </SidebarProvider>

      {/* Employee Form Sheet */}
      <Sheet open={isEmployeeSheetOpen} onOpenChange={setIsEmployeeSheetOpen}>
        <SheetContent>
          <SheetHeader>
            <SheetTitle>{selectedEmployee ? 'Edit Employee' : 'Add New Employee'}</SheetTitle>
          </SheetHeader>
          <EmployeeForm
            employee={selectedEmployee}
            onSubmit={handleEmployeeSubmit}
            onCancel={() => setIsEmployeeSheetOpen(false)}
          />
        </SheetContent>
      </Sheet>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the employee
              and remove their data from our servers.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteConfirm}>Delete</AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default Dashboard;
